{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DF-mini-project"
		},
		"AzureBlobStorageProject_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorageProject'"
		},
		"AzureSqlDatabase_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase'"
		},
		"AzureSqlDatabase1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase1'"
		},
		"AzureSqlDatabaseNew_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabaseNew'"
		},
		"AzureSqlDatabaseProject_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabaseProject'"
		},
		"PostgreSql1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'PostgreSql1'"
		},
		"PostgreSql2_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'PostgreSql2'"
		},
		"AzureSqlDatabase_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sql-admin22.database.windows.net"
		},
		"AzureSqlDatabase_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sql_db_mini"
		},
		"AzureSqlDatabase_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "hari"
		},
		"AzureSqlDatabase1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sql-admin22.database.windows.net"
		},
		"AzureSqlDatabase1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sql_db_sample"
		},
		"AzureSqlDatabase1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "hari"
		},
		"AzureSqlDatabaseNew_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sql-admin22.database.windows.net"
		},
		"AzureSqlDatabaseNew_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sql_db_mini"
		},
		"AzureSqlDatabaseNew_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "hari"
		},
		"AzureSqlDatabaseProject_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sql-admin22.database.windows.net"
		},
		"AzureSqlDatabaseProject_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sql_db_mini"
		},
		"AzureSqlDatabaseProject_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "hari"
		},
		"PostgreSql1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "localhost"
		},
		"PostgreSql1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "quiz"
		},
		"PostgreSql1_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "postgres"
		},
		"PostgreSql2_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "localhost"
		},
		"PostgreSql2_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "quiz"
		},
		"PostgreSql2_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "postgres"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL1_main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Filenames",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS1_blob_input",
								"type": "DatasetReference",
								"parameters": {
									"filename": " "
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Filenames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Filenames').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS1_blob_input",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS1_SQL_raw_Admin",
											"type": "DatasetReference",
											"parameters": {
												"tablename": {
													"value": "@split(item().name, '.')[0]",
													"type": "Expression"
												},
												"schema": "raw"
											}
										}
									]
								},
								{
									"name": "Cleaning",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DF1_clean",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"source1": {
													"tablename": {
														"value": "@split(item().name, '.')[0] ",
														"type": "Expression"
													},
													"schema": "raw"
												},
												"sink1": {
													"tablename": "@split(item().name, '.')[0] ",
													"schema": "prep"
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "Joining",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Cleaning",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DF1_joining",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"Quiz": {
													"tablename": "Quiz",
													"schema": "prep"
												},
												"Question": {
													"tablename": "Question",
													"schema": "prep"
												},
												"Option": {
													"tablename": "Option",
													"schema": "prep"
												},
												"Admin": {
													"tablename": "Admin",
													"schema": "prep"
												},
												"User": {
													"tablename": "User",
													"schema": "prep"
												},
												"UserQuiz": {
													"tablename": "UserQuiz",
													"schema": "prep"
												},
												"UserAnswer": {
													"tablename": "UserAnswer",
													"schema": "prep"
												},
												"sink1": {
													"tablename": "result1",
													"schema": "report"
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-30T04:42:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS1_blob_input')]",
				"[concat(variables('factoryId'), '/datasets/DS1_SQL_raw_Admin')]",
				"[concat(variables('factoryId'), '/dataflows/DF1_clean')]",
				"[concat(variables('factoryId'), '/dataflows/DF1_joining')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL2_main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Blob to SQL raw",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS2_blob_input",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS2_SQL",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "products",
									"schema": "raw"
								}
							}
						]
					},
					{
						"name": "Cleaning",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Blob to SQL raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF2_clean",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"rawProducts": {
										"tablename": "products",
										"schema": "raw"
									},
									"ToPrepLayer": {
										"tablename": "products",
										"schema": "prep"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Cleaning",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF2_toReport",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"tablename": "products",
										"schema": "prep"
									},
									"sink1": {
										"tablename": "products",
										"schema": "report"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-30T04:42:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS2_blob_input')]",
				"[concat(variables('factoryId'), '/datasets/DS2_SQL')]",
				"[concat(variables('factoryId'), '/dataflows/DF2_clean')]",
				"[concat(variables('factoryId'), '/dataflows/DF2_toReport')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS1_SQL_raw_Admin')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseProject",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string"
					},
					"schema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DS1"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseProject')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS1_blob_input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageProject",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DS1"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": "input-container1"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageProject')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS2_SQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseProject",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string"
					},
					"schema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DS2"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseProject')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS2_blob_input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageProject",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DS2"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "data.xlsx",
						"container": "input-container2"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "category",
						"type": "String"
					},
					{
						"name": "subCategory",
						"type": "String"
					},
					{
						"name": "subCategory1",
						"type": "String"
					},
					{
						"name": "departmentCode",
						"type": "String"
					},
					{
						"name": "categoryCode",
						"type": "String"
					},
					{
						"name": "categoryName",
						"type": "String"
					},
					{
						"name": "searchCategoryCode",
						"type": "String"
					},
					{
						"name": "seriesCode",
						"type": "String"
					},
					{
						"name": "seriesName",
						"type": "String"
					},
					{
						"name": "brandCode",
						"type": "String"
					},
					{
						"name": "brandUrlCode",
						"type": "String"
					},
					{
						"name": "brandName",
						"type": "String"
					},
					{
						"name": "seriesStatus",
						"type": "String"
					},
					{
						"name": "minStandardDaysToShip",
						"type": "String"
					},
					{
						"name": "maxStandardDaysToShip",
						"type": "String"
					},
					{
						"name": "minPricePerPiece",
						"type": "String"
					},
					{
						"name": "maxPricePerPiece",
						"type": "String"
					},
					{
						"name": "directCartType",
						"type": "String"
					},
					{
						"name": "priceCheckLessFlag",
						"type": "String"
					},
					{
						"name": "minStandardUnitPrice",
						"type": "String"
					},
					{
						"name": "maxStandardUnitPrice",
						"type": "String"
					},
					{
						"name": "recommendFlag",
						"type": "String"
					},
					{
						"name": "iconTypeList",
						"type": "String"
					},
					{
						"name": "volumeDiscountFlag",
						"type": "String"
					},
					{
						"name": "cValueFlag",
						"type": "String"
					},
					{
						"name": "stockItemFlag",
						"type": "String"
					},
					{
						"name": "displayStandardPriceFlag",
						"type": "String"
					},
					{
						"name": "discontinuedProductFlag",
						"type": "String"
					},
					{
						"name": "promptDeliveryFlag",
						"type": "String"
					},
					{
						"name": "keywordClickCount",
						"type": "String"
					},
					{
						"name": "specialShipmentFlag",
						"type": "String"
					},
					{
						"name": "recommendFlagdata",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageProject')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageProject')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorageProject_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase1_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseNew')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabaseNew_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabaseNew_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabaseNew_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabaseNew_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime2",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseProject')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabaseProject_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabaseProject_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabaseProject_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabaseProject_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PostgreSql1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "PostgreSqlV2",
				"typeProperties": {
					"server": "[parameters('PostgreSql1_properties_typeProperties_server')]",
					"port": 5432,
					"database": "[parameters('PostgreSql1_properties_typeProperties_database')]",
					"username": "[parameters('PostgreSql1_properties_typeProperties_username')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('PostgreSql1_password')]"
					},
					"sslMode": 2,
					"authenticationType": "Basic"
				},
				"connectVia": {
					"referenceName": "integrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PostgreSql2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "PostgreSqlV2",
				"typeProperties": {
					"server": "[parameters('PostgreSql2_properties_typeProperties_server')]",
					"port": 5432,
					"database": "[parameters('PostgreSql2_properties_typeProperties_database')]",
					"username": "[parameters('PostgreSql2_properties_typeProperties_username')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('PostgreSql2_password')]"
					},
					"sslMode": 2,
					"authenticationType": "Basic"
				},
				"connectVia": {
					"referenceName": "integrationRuntime2",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime2')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF1_clean')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS1_SQL_raw_Admin",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS1_SQL_raw_Admin",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS1_SQL_raw_Admin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF1_joining')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS1_SQL_raw_Admin",
								"type": "DatasetReference"
							},
							"name": "Quiz"
						},
						{
							"dataset": {
								"referenceName": "DS1_SQL_raw_Admin",
								"type": "DatasetReference"
							},
							"name": "Question"
						},
						{
							"dataset": {
								"referenceName": "DS1_SQL_raw_Admin",
								"type": "DatasetReference"
							},
							"name": "Option"
						},
						{
							"dataset": {
								"referenceName": "DS1_SQL_raw_Admin",
								"type": "DatasetReference"
							},
							"name": "Admin"
						},
						{
							"dataset": {
								"referenceName": "DS1_SQL_raw_Admin",
								"type": "DatasetReference"
							},
							"name": "User"
						},
						{
							"dataset": {
								"referenceName": "DS1_SQL_raw_Admin",
								"type": "DatasetReference"
							},
							"name": "UserQuiz"
						},
						{
							"dataset": {
								"referenceName": "DS1_SQL_raw_Admin",
								"type": "DatasetReference"
							},
							"name": "UserAnswer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS1_SQL_raw_Admin",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "join3"
						},
						{
							"name": "UserAndUserQuiz"
						},
						{
							"name": "join4"
						},
						{
							"name": "join5"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          title as string,",
						"          description as string,",
						"          createdBy as string,",
						"          shareableCode as string,",
						"          responses as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Quiz",
						"source(output(",
						"          id as string,",
						"          quizId as string,",
						"          questionText as string,",
						"          questionType as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Question",
						"source(output(",
						"          id as string,",
						"          questionId as string,",
						"          optionText as string,",
						"          isCorrect as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Option",
						"source(output(",
						"          id as string,",
						"          username as string,",
						"          email as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Admin",
						"source(output(",
						"          id as string,",
						"          username as string,",
						"          email as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> User",
						"source(output(",
						"          id as string,",
						"          userId as string,",
						"          quizId as string,",
						"          score as string,",
						"          completedAt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> UserQuiz",
						"source(output(",
						"          id as string,",
						"          userQuizId as string,",
						"          questionId as string,",
						"          optionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> UserAnswer",
						"Quiz, Question join(Quiz@id == quizId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, Option join(Question@id == questionId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2, Admin join(createdBy == Admin@id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"User, UserQuiz join(User@id == userId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> UserAndUserQuiz",
						"join3, UserAndUserQuiz join(Quiz@id == UserQuiz@quizId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4, UserAnswer join(UserQuiz@id == userQuizId",
						"     && Question@id == UserAnswer@questionId",
						"     && Option@id == optionId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"join5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS1_SQL_raw_Admin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF2_clean')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS2_SQL",
								"type": "DatasetReference"
							},
							"name": "rawProducts"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS2_SQL",
								"type": "DatasetReference"
							},
							"name": "ToPrepLayer"
						}
					],
					"transformations": [
						{
							"name": "AddDuplicate"
						},
						{
							"name": "FilterDuplicate"
						},
						{
							"name": "DropUnwantedCloumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          category as string,",
						"          subCategory as string,",
						"          subCategory1 as string,",
						"          departmentCode as string,",
						"          categoryCode as string,",
						"          categoryName as string,",
						"          searchCategoryCode as string,",
						"          seriesCode as string,",
						"          seriesName as string,",
						"          brandCode as string,",
						"          brandUrlCode as string,",
						"          brandName as string,",
						"          seriesStatus as string,",
						"          minStandardDaysToShip as string,",
						"          maxStandardDaysToShip as string,",
						"          minPricePerPiece as string,",
						"          maxPricePerPiece as string,",
						"          directCartType as string,",
						"          priceCheckLessFlag as string,",
						"          minStandardUnitPrice as string,",
						"          maxStandardUnitPrice as string,",
						"          recommendFlag as string,",
						"          iconTypeList as string,",
						"          volumeDiscountFlag as string,",
						"          cValueFlag as string,",
						"          stockItemFlag as string,",
						"          displayStandardPriceFlag as string,",
						"          discontinuedProductFlag as string,",
						"          promptDeliveryFlag as string,",
						"          keywordClickCount as string,",
						"          specialShipmentFlag as string,",
						"          recommendFlagdata as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> rawProducts",
						"rawProducts window(asc(seriesCode, true),",
						"     Duplicate = iif(lag(seriesCode) == seriesCode, true(), false())) ~> AddDuplicate",
						"AddDuplicate filter(!Duplicate) ~> FilterDuplicate",
						"FilterDuplicate select(mapColumn(",
						"          category,",
						"          subCategory,",
						"          subCategory1,",
						"          departmentCode,",
						"          categoryCode,",
						"          categoryName,",
						"          searchCategoryCode,",
						"          seriesCode,",
						"          seriesName,",
						"          brandCode,",
						"          brandUrlCode,",
						"          brandName,",
						"          minStandardDaysToShip,",
						"          maxStandardDaysToShip,",
						"          minPricePerPiece,",
						"          maxPricePerPiece,",
						"          minStandardUnitPrice,",
						"          maxStandardUnitPrice,",
						"          recommendFlag,",
						"          volumeDiscountFlag,",
						"          stockItemFlag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropUnwantedCloumn",
						"DropUnwantedCloumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> ToPrepLayer"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS2_SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF2_toReport')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS2_SQL",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS2_SQL",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS2_SQL')]"
			]
		}
	]
}